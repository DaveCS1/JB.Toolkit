using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;

namespace JBToolkit.Views
{
    /// <summary>
    /// Generates JQquery DataTable HTML from a model.
    /// 
    /// Uses the autogenerated HTML as a data source. 
    /// 
    /// This was one of the first JQuery DataTable helpers, and has structured, typed objects. A drawback is that not every parameter and option
    /// of DataTables has been included, so it's limit in that sense, however it may be easier to re-use to use and also as it's generating HTML,
    /// we have an easier time apply fine detailed styling to each column.
    /// 
    /// Used in conjunction with the 'JQueryDataTable.cshtml' view (You can just inherit this from your own model if you wish)
    /// 
    /// YOUR PROJECT MUST INCLUDE JAVASCRIPT PACKAGES & CSS for Bootstrap, DataTables, DataTables Extensions and Editor
    /// 
    /// <link href = "~/Scripts/packages/bootstrap-3.3.6/css/bootstrap.min.css" rel="stylesheet" />
    /// <link href = "~/Scripts/packages/bootstrap-tree-view/bootstrap-treeview.min.css" rel="stylesheet" />
    /// 
    /// <!-- DataTables -->
    /// <link href = "~/Scripts/packages/DataTables-1.10.20/media/css/dataTables.bootstrap.min.css" rel="stylesheet" />
    /// <link href = "~/Scripts/packages/DataTables-1.10.20/extensions/Buttons/css/buttons.dataTables.min.css" rel="stylesheet" />
    /// <link href = "~/Scripts/packages/DataTables-1.10.20/extensions/Responsive/css/responsive.dataTabl;es.min.css" rel="stylesheet" />
    /// <link href = "~/Scripts/packages/DataTables-1.10.20/extensions/Responsive/css/responsive.boostrap.min.css" rel="stylesheet" />
    /// <link href = "~/Scripts/packages/DataTables-1.10.20/extensions/Scroller/css/scroller.dataTables.min.css" rel="stylesheet" />
    /// <link href = "~/Scripts/packages/DataTables-1.10.20/extensions/Select/css/select.dataTables.min.css" rel="stylesheet" />
    /// <link href = "~/Scripts/packages/DataTables-1.10.20/extensions/ColReorder/css/colReorder.dataTables.min.css" rel="stylesheet" />
    /// <link href = "~/Scripts/packages/DataTables-1.10.20/extensions/Editor/css/editor.bootstrap.min.css" rel="stylesheet" />
    /// <link href = "~/Scripts/packages/DataTables-1.10.20/extensions/Editor/css/editor.dataTables.min.css" rel="stylesheet" />
    /// <script src = "~/Scripts/packages/jquery-1.12.4/jquery-1.12.4.min.js" ></ script >
    /// <script src="~/Scripts/packages/jquery-1.12.4/jquery.validate.min.js"></script>
    /// <script src = "~/Scripts/packages/jquery-1.12.4/jquery.validate.unobtrusive.min.js" ></ script >
    /// <script src="~/Scripts/packages/jquery-1.12.4/jquery.unobtrusive-ajax.min.js"></script>
    /// 
    /// <!-- Bootstrap -->
    /// <script src = "~/Scripts/packages/bootstrap-3.3.6/js/bootstrap.min.js" ></ script >
    /// <script src="~/Scripts/packages/bootstrap-tree-view/bootstrap-treeview.min.js"></script>
    /// 
    /// <!-- DataTables -->
    /// <script src = "~/Scripts/packages/DataTables-1.10.20/media/js/jquery.dataTables.min.js" ></ script >
    /// <script src="~/Scripts/packages/DataTables-1.10.20/media/js/dataTables.bootstrap.min.js"></script>
    /// <script src = "~/Scripts/packages/DataTables-1.10.20/extensions/Buttons/js/dataTables.buttons.min.js" ></ script >
    /// <script src = "~/Scripts/packages/DataTables-1.10.20/extensions/Responsive/js/dataTables.responsive.min.js" ></ script >
    /// <script src = "~/Scripts/packages/DataTables-1.10.20/extensions/Responsive/js/responsive.bootstrap.min.js" ></ script >
    /// <script src="~/Scripts/packages/jszip-2.5.0/jszip.min.js"></script>
    /// <script src = "~/Scripts/packages/pdfmake-0.1.18/pdfmake.min.js" ></ script >
    /// <script src="~/Scripts/packages/pdfmake-0.1.18/vfs_fonts.js"></script>
    /// <script src = "~/Scripts/packages/DataTables-1.10.20/extensions/Scroller/js/dataTables.scroller.min.js" ></ script >
    /// <script src="~/Scripts/packages/DataTables-1.10.20/extensions/ColReorder/js/dataTables.colReorder.min.js"></script>
    /// <script src = "~/Scripts/packages/DataTables-1.10.20/extensions/Select/js/dataTables.select.min.js" ></ script >
    /// <script src="~/Scripts/packages/DataTables-1.10.20/extensions/Buttons/js/buttons.html5.min.js"></script>
    /// <script src = "~/Scripts/packages/DataTables-1.10.20/extensions/Buttons/js/buttons.print.min.js" ></ script >
    /// <script src="~/Scripts/packages/DataTables-1.10.20/extensions/Buttons/js/buttons.colVis.min.js"></script>
    /// <script src = "~/Scripts/packages/DataTables-1.10.20/extensions/Editor/js/dataTables.editor.min.js" ></ script >
    /// <script src="~/Scripts/packages/DataTables-1.10.20/extensions/Editor/js/editor.bootstrap.min.js"></script>
    /// 
    /// Alternatively, you can use a concatonated and minified CDN from here:
    /// https://datatables.net/download/
    /// 
    /// However you will need this regardless:
    /// <script src = "~/Scripts/dataTablesExtensions.js" ></ script >   
    ///     
    /// </summary>
    [Serializable]
    public class JqueryHtmlDataTable : _JqueryDataTable
    {
        /// <summary>
        /// Headers collection (manditory)
        /// </summary>
        public List<JQTHeader> Headers { get; set; }

        /// <summary>
        /// Null is default. If provided it will render a selectable list in place of the table name header which can be handle in additional JavaScript or in the parent view.
        /// </summary>
        public JQTSelectableDataSource SelectableDataSource { get; set; } = null;

        /// <summary>
        /// Columns collection (manditory)
        /// </summary>
        public List<JQTRow> Rows { get; set; } = new List<JQTRow>();

        /// <summary>
        /// How to sort the column - ASC or DESC (ascending by default - optional) and which column to sort by
        /// </summary>
        public JQTSorting Sorting { get; set; }

        public JqueryHtmlDataTable()
        {
        }

        public JqueryHtmlDataTable(
            string tableName,
            List<JQTHeader> headers,
            List<JQTRow> rows,
            JQTSorting sorting,
            string additionalJavaScript = "",
            string uniqueId = "Default",
            bool useCustomHeader = true,
            bool responsive = false)
        {
            TableName = tableName;
            Headers = headers;
            Rows = rows;
            AdditionalJavaScript = additionalJavaScript;
            UniqueID = uniqueId;
            UseCustomHeader = useCustomHeader;
            Responsive = responsive;

            if (Sorting == null)
            {
                Sorting = new JQTSorting();
            }
            else
            {
                Sorting = sorting;
            }
        }

        /// <summary>
        /// Generates the html for custom filters
        /// </summary>
        public override string GenerateFilters()
        {
            StringBuilder sb = new StringBuilder();

            if (UseCustomHeader)
            {
                foreach (var header in Headers)
                {
                    if (string.IsNullOrEmpty(header.ColumnId))
                    {
                        if (!string.IsNullOrEmpty(header.Title))
                        {
                            header.ColumnId = header.Title.Replace(" ", "").ToLower();
                        }
                        else
                        {
                            header.ColumnId = new Guid().ToString().Replace("-", "");
                        }
                    }
                }

                if (Headers != null)
                {
                    foreach (var header in Headers)
                    {
                        if (header.AutoFilter != null)
                        {
                            if ((bool)header.AutoFilter)
                            {
                                sb.Append(
                                @"<li class='dropdown' style='padding: 15px 0px 15px 16px;'>
                                <a href='#' class='dropdown-toggle' data-toggle='dropdown' role='button' aria-haspopup='true' aria-expanded='false' style='padding: 0px !important; margin: 0px !important;'>
                                    " + header.Title + @"
                                    <span class='caret'></span>
                                </a>
                                <ul id='tbl-" + UniqueID + @"_JQDT-" + header.ColumnId + @"' class='dropdown-menu'>
                                    <li>
                                        <a class='tbl-" + UniqueID + @"_JQDT-" + header.ColumnId + @"-Filter' href='#' data=''>
                                            <i class='fa fa-check tbl-" + UniqueID + @"_JQDT-" + header.ColumnId + @"-SelectedFilter' aria-hidden='true'></i> All
                                        </a>
                                    </li>
                                    <li role='separator' class='divider'></li>
                                </ul>
                             </li>");
                            }
                        }
                    }
                }
            }
            else
            {
                if (!HideHeader)
                {
                    sb.Append(@"<style>
                            #tbl-" + UniqueID + @"_JQDT_wrapper .dt-buttons {
                                position: relative !important;
                                left: 0px !important;
                            }
                          </style>");
                }
            }

            return sb.ToString().Replace("\n", "").Replace("\t", "").Replace("\r", "");
        }

        /// <summary>
        /// Generates the Jquery DataTable registration call for the DataTable itself
        /// </summary>
        public override string GenerateRegisterDataTableScript()
        {
            return "registerDataTable('" + UniqueID +
                "_JQDT', " +
                Sorting.SortByColumnIndex + ", " +
                (int)Sorting.SortDirection + ", '" +
                Responsive + "');";
        }

        /// <summary>
        /// Generates the Jquery DataTable registration call for the filters
        /// </summary>
        public override string GenerateRegisterFiltersScript()
        {
            if (UseCustomHeader)
            {
                StringBuilder sb = new StringBuilder();

                if (Headers != null)
                {
                    int columnIndex = 0;

                    foreach (var header in Headers)
                    {
                        if (header.AutoFilter != null)
                        {
                            if ((bool)header.AutoFilter)
                            {
                                sb.Append(@"registerAutoFilter('" + UniqueID + "_JQDT', '" + header.ColumnId + "', " + columnIndex + ");");
                            }
                        }

                        columnIndex++;
                    }
                }

                return sb.ToString().Replace("\n", "").Replace("\t", "").Replace("\r", "");
            }

            return string.Empty;
        }

        /// <summary>
        /// Generates any additional JavaScript specified to the buttom of the scripts section.
        /// 
        /// * Be aware of JavaScript special characters. Use the '<string>.GetJavaScriptAcceptableString()' extension in most circumstances
        /// </summary>
        public override string GenerateAdditionalJavaScript()
        {
            return AdditionalJavaScript;
        }

        /// <summary>
        /// Generates the SQL XML required to later generate the HTML
        /// </summary>
        /// <returns></returns>
        public override string GenerateHtmlTable()
        {
            return GenerateHtmlTable(TableName, Headers, Rows, Sorting, AdditionalJavaScript, UniqueID);
        }

        /// <summary>
        /// Generates the table data in the form of a HTML table
        /// </summary>
        public string GenerateHtmlTable(

            string tableName,
            List<JQTHeader> headers,
            List<JQTRow> rows,
            JQTSorting sorting,
            string additionalJavaScript = "",
            string uniqueID = "Default")
        {
            #region Validation

            if (string.IsNullOrEmpty(tableName))
            {
                throw new ApplicationException("JqueryHtmlDataTable - No table name defined");
            }

            if (headers.Count == 0)
            {
                throw new ApplicationException("JqueryHtmlDataTable - No headers defined");
            }

            if (rows.Count > 0)
            {
                if (headers.Count != rows[0].Columns.Count)
                {
                    throw new ApplicationException("JqueryDataTable - Header count not equal to column count");
                }
            }

            #endregion

            if (sorting != null)
            {
                Sorting = sorting;
            }

            if (!string.IsNullOrEmpty(uniqueID))
            {
                UniqueID = uniqueID;
            }
            else
            {
                UniqueID = "Default";
            }

            if (!string.IsNullOrEmpty(additionalJavaScript))
            {
                AdditionalJavaScript = additionalJavaScript;
            }

            StringBuilder sb = new StringBuilder();

            sb.Append("<table id='tbl-" + UniqueID + "_JQDT' class='table table-striped table-bordered' cellspacing='0' style='width: 100%;'>");

            int index = 0;

            #region Headers

            if (headers.Count > 0)
            {
                sb.Append("<thead><tr>");
            }

            foreach (var header in headers)
            {
                sb.Append("<th");

                // AUTO FILTER
                if (header.AutoFilter != null)
                {
                    if ((bool)header.AutoFilter)
                    {
                        sb.Append(" data-autofilter='yes' ");
                    }
                }

                // COLUMN ID
                if (string.IsNullOrEmpty(header.ColumnId))
                {
                    sb.Append(" data-data-columnid='' ");
                }
                else
                {
                    sb.Append(" data-data-columnid=''" + header.ColumnId + "' ");
                }

                sb.Append(">");

                // TITLE
                if (header.Title == null)
                {
                    throw new ApplicationException("JqueryDataTable - Header needs a title even if it's an empty string");
                }
                else
                {
                    sb.Append(header.Title);
                }

                sb.Append("</th>");

                index++;
            }

            if (headers.Count > 0)
            {
                sb.Append("</thead></tr>");
            }

            #endregion

            #region Footers

            if (headers.Count > 0)
            {
                sb.Append("<tfoot><tr>");
            }

            foreach (var header in headers)
            {
                sb.Append("<th");

                // AUTO FILTER
                if (header.AutoFilter != null)
                {
                    if ((bool)header.AutoFilter)
                    {
                        sb.Append(" data-autofilter='yes' ");
                    }
                }

                // COLUMN ID

                if (string.IsNullOrEmpty(header.ColumnId))
                {
                    sb.Append(" data-data-columnid='' ");
                }
                else
                {
                    sb.Append(" data-columnid='" + HttpUtility.HtmlEncode(header.ColumnId) + "' ");
                }

                sb.Append(">");

                // TITLE
                if (header.Title == null)
                {
                    throw new ApplicationException("JqueryDataTable - Header needs a title even if it's an empty string");
                }
                else
                {
                    sb.Append(header.Title.Replace("&amp;", "&"));
                }

                sb.Append("</th>");

                index++;
            }

            if (headers.Count > 0)
            {
                sb.Append("</tfoot></tr>");
            }

            #endregion

            #region Columns

            index = 0;

            sb.Append("<tbody>");

            string[] dtFormats = {
                    "dd-MM-yyyy HH:mm:ss",
                    "dd MMM yyyy HH:mm:ss",
                    "dd-MM-yyyy HH:mm",
                    "dd MMM yyyy HH:mm",
                    "dd MMM yyyy",
                    "dd-MM-yyyy",
                    "dd/MM/yyyy",
                    "dd-MM-yyyy HH:mm:ss",
                    "dd/MM/yyyy HH:mm"
                  };

            foreach (var row in Rows)
            {
                if (row.Columns.Count > 0)
                {
                    sb.Append("<tr>");
                }

                foreach (var column in row.Columns)
                {
                    sb.Append("<td");

                    // CSS CLASS
                    if (column.CssClass != null)
                    {
                        sb.Append(" class='" + column.CssClass + "' ");
                    }

                    // CSS STYLE
                    if (column.CssStyle != null)
                    {
                        sb.Append(" style='" + column.CssStyle + "' ");
                    }

                    // SORTABLE COLUMN
                    if (!string.IsNullOrEmpty(column.SortableColumnText))
                    {
                        sb.Append(" data-sort='" + HttpUtility.HtmlEncode(column.SortableColumnText) + "' ");
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(column.ColumnText))
                        {
#pragma warning disable IDE0018 // Inline variable declaration
                            DateTime result;
#pragma warning restore IDE0018 // Inline variable declaration

                            if (DateTime.TryParseExact(column.ColumnText, dtFormats, new CultureInfo("en-GB"), DateTimeStyles.None, out result))
                            {
                                sb.Append(" data-sort='" + HttpUtility.HtmlEncode(result.ToString("yyyyMMdd")) + "' ");
                            }
                            else
                            {
                                sb.Append(" data-sort='" + HttpUtility.HtmlEncode(column.ColumnText.RemoveHtmlTags()) + "' ");
                            }
                        }
                    }

                    // SEARCHABLE COLUMN
                    if (!string.IsNullOrEmpty(column.SearchableColumnText))
                    {
                        sb.Append(" data-search='" + HttpUtility.HtmlEncode(column.SearchableColumnText) + "' ");
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(column.ColumnText))
                        {
                            sb.Append(" data-search='" + HttpUtility.HtmlEncode(column.ColumnText.RemoveHtmlTags()) + "' ");
                        }
                    }

                    sb.Append(">");

                    // LINK URL
                    if (!string.IsNullOrEmpty(column.HyperlinkUrl))
                    {
                        sb.Append("<a href=\"" + column.HyperlinkUrl + "\" target=\"" + column.HyperlinkTarget.ToString() + "\">");
                    }

                    // DATA COLUMN TEXT
                    if (column.ColumnText != null)
                    {
                        sb.Append(column.ColumnText.Replace("&amp;", "&"));
                    }

                    if (!string.IsNullOrEmpty(column.HyperlinkUrl))
                    {
                        sb.Append("</a>");
                    }

                    sb.Append("</td>");

                    index++;
                }

                if (row.Columns.Count > 0)
                {
                    sb.Append("</tr>");
                }
            }

            sb.Append("</tbody>");

            #endregion

            sb.Append("</table>");

            return sb.ToString().Replace("\n", "").Replace("\t", "").Replace("\r", "");
        }

        /// <summary>
        /// This is just an example chunk of code for building a JqueryDataTable from an object (list, datatable etc).
        /// It doesn't work, just gives a proof of concept
        /// </summary>
        public async Task<ActionResult> BuildJQueryDataTableExample()
        {
            List<object> someObject = null; // some object to conver to JQueryDataTable

            JqueryHtmlDataTable jqModel = new JqueryHtmlDataTable
            {
                TableName = "Documents",
                Rows = new List<JQTRow>(),
                UniqueID = "Default",
                Headers = new List<JQTHeader>() {
                    new JQTHeader
                    {
                        Title = "Title",
                    },
                    new JQTHeader
                    {
                        Title = "",
                        ColumnId = "type"
                    },
                    new JQTHeader
                    {
                         Title = "Parent",
                    },
                    new JQTHeader
                    {
                         Title = "Link",
                         AutoFilter = true,
                    },
                    new JQTHeader
                    {
                         Title = "Class",
                         AutoFilter = true,
                         ColumnId = "class"
                    },
                    new JQTHeader
                    {
                         Title = "Created",
                    },
                    new JQTHeader
                    {
                         Title = "Created By",
                         AutoFilter = true,
                    }
                },
                Sorting = new JQTSorting
                {
                    SortByColumnIndex = 3,
                    SortDirection = JQTSortDirection.DECENDING
                }
            };

#pragma warning disable IDE0059 // Unnecessary assignment of a value
            foreach (var document in someObject)
#pragma warning restore IDE0059 // Unnecessary assignment of a value
            {
                jqModel.Rows.Add(
                      new JQTRow
                      {
                          Columns = new List<JQTColumn>() {
                                new JQTColumn {
                                    ColumnText = "<column text>",
                                    SearchableColumnText = "<column text>",
                                    SortableColumnText = "<column text>",
                                    HyperlinkUrl = "javascript:SomeMethod('" + "<some parameter>" + "') or just http://www.google.co.uk",
                                    CssStyle = "font-size: 10pt; text-align: left;"
                                },
                                 new JQTColumn {
                                    ColumnText = "<column text>",
                                    SearchableColumnText = "<column text>",
                                    SortableColumnText = "<column text>",
                                    CssStyle = "font-size: 10pt; text-align: center;"
                                },
                                new JQTColumn {
                                    ColumnText = "<column text>",
                                    CssStyle = "font-size: 10pt; text-align: center;"
                                },
                                new JQTColumn {
                                    ColumnText = "<column text>",
                                    CssStyle = "font-size: 10pt; text-align: center;"
                                },
                                 new JQTColumn {
                                    ColumnText = "<column text>",
                                    CssStyle = "font-size: 10pt; text-align: center;"
                                },
                                new JQTColumn {
                                    ColumnText = "<column text>",
                                    CssStyle = "font-size: 10pt; text-align: center;"
                                },
                                new JQTColumn {
                                    ColumnText = "<column text>",
                                    CssStyle = "font-size: 10pt; text-align: center;"
                                }
                          }
                      }
                );
            }

            jqModel.AdditionalJavaScript = "function DoSomething(var parameter) {}";

            return await Task.FromResult(PartialView("../Shared/JQueryDataTable", jqModel));
        }

        private ActionResult PartialView(string v, JqueryHtmlDataTable jqModel)
        {
            if (v is null)
            {
                throw new ArgumentNullException(nameof(v));
            }

            if (jqModel is null)
            {
                throw new ArgumentNullException(nameof(jqModel));
            }

            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Header information
    /// </summary>
    [Serializable]
    public class JQTHeader
    {
        public string Title { get; set; }
        public bool? AutoFilter { get; set; }
        public string ColumnId { get; set; } = string.Empty;
    }

    /// <summary>
    /// List of columns
    /// </summary>
    [Serializable]
    public class JQTRow
    {
        public List<JQTColumn> Columns { get; set; }
    }

    /// <summary>
    /// How to open a hyperlink
    /// </summary>
    public enum HyperlinkTargetEnum
    {
        _blank,
        _self,
        _parent,
        _top
    }

    /// <summary>
    /// Individual column object
    /// </summary>
    [Serializable]
    public class JQTColumn
    {
        public string CssClass { get; set; }
        public string CssStyle { get; set; }
        public string SortableColumnText { get; set; } = string.Empty;
        public string SearchableColumnText { get; set; } = string.Empty;
        public string ColumnText { get; set; }
        public string HyperlinkUrl { get; set; }
        public HyperlinkTargetEnum HyperlinkTarget { get; set; } = HyperlinkTargetEnum._self;
    }

    /// <summary>
    /// You'll have to handle the javascript in the parent view, via creating an event handler referencing the given UniqueID
    ///
    /// Example: 
    /// 
    ///   $("#<UniqueID>").on('change', function () {
    ///        alert("value = " + this.value + " - extra = " + $(this).find(':selected').data("extra"));
    ///   });
    ///
    /// </summary>
    [Serializable]
    public class JQTSelectableDataSource
    {
        public string UniqueID { get; set; }
        public List<JQTSelectableDataSourceItem> Items { get; set; }
    }

    /// <summary>
    /// Iteams for SelectableDataSource
    /// </summary>
    public class JQTSelectableDataSourceItem
    {
        public string Label { get; set; }
        public string Value { get; set; }
        public string Extra { get; set; }
    }

    /// <summary>
    /// Column Sort Direction enum
    /// </summary>
    [Serializable]
    public enum JQTSortDirection
    {
        ASCENDING = 0,
        DECENDING = 1
    }

    /// <summary>
    /// Sort direction and column index object
    /// </summary>
    [Serializable]
    public class JQTSorting
    {
        public int SortByColumnIndex { get; set; } = 0;
        public JQTSortDirection? SortDirection { get; set; } = JQTSortDirection.ASCENDING;
    }
}