using JBToolkit.Windows;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Threading;

namespace JBToolkit.PdfDoc
{
    /// <summary>
    /// Converts PDF to image (memory stream array, byte array or PNG) - Also includes optimised option image version for use with Google Vision API (OCR)
    /// </summary>
    public partial class PdfConverter
    {
        /// <summary>
        /// Converts PDF to 3D byte array (array of byte arrays - 1 byte array for each image for each page)
        /// </summary>
        /// <param name="path">Path of PDF file to convert</param>
        /// <param name="usingToExtractText">Optimise for Google Vision API (OCR) use</param>
        /// <param name="timeoutSeconds">Timeout before reporting failing</param>
        /// <returns>Return 3D byte array (array of byte arrays - 1 byte array for each image for each page</returns>
        public static byte[][] ConvertPdfToImage2DByteArray(string path, bool usingToExtractText = false, int timeoutSeconds = 30)
        {
            MemoryStream[] msArray = ConvertPdfToPng(path, usingToExtractText, timeoutSeconds);

            List<byte[]> baList = new List<byte[]>();

            foreach (MemoryStream ms in msArray)
            {
                baList.Add(ms.ToArray());
            }

            return baList.ToArray();
        }

        /// <summary>
        /// Converts PDF to memory stream array (array memory streams - 1 memory stream for each image for each page)
        /// </summary>
        /// <param name="path">Path of PDF file to convert</param>
        /// <param name="usingToExtractText">Optimise for Google Vision API (OCR) use</param>
        /// <param name="timeoutSeconds">Timeout before reporting failing</param>
        /// <returns>Memory stream array (array memory streams - 1 memory stream for each image for each page)</returns>
        public static MemoryStream[] ConvertPdfToPng(string path, bool usingToExtactText = false, int timeoutSeconds = 30)
        {
            List<MemoryStream> msList = new List<MemoryStream>();

            string tempFolder = DirectoryHelper.GetTempFile();
            string tempFilename = DirectoryHelper.GenerateTempFilename();
            Directory.CreateDirectory(tempFolder);

            string execPath = GetPdfToPngExeLocation();
            string content;
            if (usingToExtactText) // quicker
            {
                content = ProcessHelper.ExecuteProcessAndReadStdOut(execPath, out string _, "-r 200 -gray \"" + path + "\"  \"" + Path.Combine(tempFolder, tempFilename) + "\"", "", timeoutSeconds, true);
            }
            else
            {
                content = ProcessHelper.ExecuteProcessAndReadStdOut(execPath, out string _, "-r 600 \"" + path + "\"  \"" + Path.Combine(tempFolder, tempFilename) + "\"", "", timeoutSeconds, true);
            }

            string[] convertedPaths = Directory.GetFiles(tempFolder);

            if (convertedPaths.Length > 0)
            {
                foreach (string convertedPath in convertedPaths)
                {
                    Image png = Image.FromFile(convertedPaths[0]);

                    using (var ms = new MemoryStream())
                    {
                        png.Save(ms, png.RawFormat);
                        msList.Add(ms);
                    }
                }

                return msList.ToArray();
            }
            else
            {
                DeleteTemps(tempFolder);
                throw new ApplicationException("Unable to convert PDF to PNG: No PNG files generated by command-line utility. Output given: " + content);
            }
        }

        /// <summary>
        /// Converts and saves a PDF file as 1 or more PNG images (1 image per PDF page)
        /// </summary>
        /// <param name="inputPath">Input file path of PDF file</param>
        /// <param name="rootOutputPath">Root output folder where PNG images will be saved to</param>
        /// <param name="imageTitle">A given title for the prefix of the set of images</param>
        /// <param name="timeoutSeconds">Timeout in seconds before error is reported</param>
        /// <param name="throwOnError"></param>
        public static void SavePdfAsPng(string inputPath, string rootOutputPath, string imageTitle, int timeoutSeconds = 30)
        {
            if (!Directory.Exists(rootOutputPath))
            {
                Directory.CreateDirectory(rootOutputPath);
            }

            if (string.IsNullOrEmpty(rootOutputPath))
            {
                rootOutputPath = new FileInfo(inputPath).DirectoryName;
            }

            string execPath = GetPdfToPngExeLocation();
            _ = ProcessHelper.ExecuteProcessAndReadStdOut(execPath, out string _, "-r 600 \"" + inputPath + "\"  \"" + Path.Combine(rootOutputPath, imageTitle) + "\"", "", timeoutSeconds, true);
        }

        private static void DeleteTemps(string path)
        {
            try
            {
                foreach (string file in Directory.GetFiles(path))
                {
                    try
                    {
                        File.Delete(file);
                    }
                    catch
                    {
                        Thread.Sleep(500);
                        try
                        {
                            File.Delete(file);
                        }
                        catch { }
                    }
                }

                Thread.Sleep(200);
                Directory.Delete(path, true);
            }
            catch
            {
                try
                {
                    Directory.Delete(path, true);
                }
                catch { }
            }
        }

        /// <summary>
        /// From resource embedded in JBToolkit.dll
        /// </summary>
        private static string GetPdfToPngExeLocation()
        {
            return AssemblyHelper.EmbeddedResourceHelper.InternalGetEmbeddedResourcePathFromJBToolkit("pdftopng.exe", true);
        }
    }
}
