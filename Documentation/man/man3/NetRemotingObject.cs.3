.TH "D:/OneDrive/Documents/Work/Repositories/JB.Toolkit/JBToolkit/InterProcessComms/NetRemoting/NetRemotingObject.cs" 3 "Mon Aug 31 2020" "JB.Toolkit" \" -*- nroff -*-
.ad l
.nh
.SH NAME
D:/OneDrive/Documents/Work/Repositories/JB.Toolkit/JBToolkit/InterProcessComms/NetRemoting/NetRemotingObject.cs
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBJBToolkit\&.InterProcessComms\&.NetRemoting\&.RemoteObject\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBJBToolkit\fP"
.br
.ti -1c
.RI "namespace \fBJBToolkit\&.InterProcessComms\fP"
.br
.RI "Gist from: https://weblogs.asp.net/ricardoperes/local-machine-interprocess-communication-with-netD "
.ti -1c
.RI "namespace \fBJBToolkit\&.InterProcessComms\&.NetRemoting\fP"
.br
.RI "\&.NET Remoting, in the old days, was \&.NETâ€™s response to Java RMI, and basically was a remote references implementation, similar to CORBA\&. With Remoting, one can call methods on an object that resides in a different machine\&. \&.NET Remoting has long since been superseded by WCF, but it is still a viable alternative, particularly because WCF does not allow remote references\&. "
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for JB\&.Toolkit from the source code\&.
