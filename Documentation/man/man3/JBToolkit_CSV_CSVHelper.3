.TH "JBToolkit.Csv.CsvHelper" 3 "Sat Oct 10 2020" "JB.Toolkit" \" -*- nroff -*-
.ad l
.nh
.SH NAME
JBToolkit.Csv.CsvHelper
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBCsvTrimOptions\fP { \fBCsvTrimOptions\&.None\fP, \fBCsvTrimOptions\&.TrimInsideQuotes\fP, \fBCsvTrimOptions\&.TrimFields\fP }"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBIEnumerable\fP< T > \fBCsvFileToEnumerableObject< T >\fP (string path, string delimiter='auto', bool hasHeaders=true, bool ignoreQuotes=false, \fBCsvTrimOptions\fP trimOptions=\fBCsvTrimOptions\&.TrimFields\fP)"
.br
.RI "Reads CSV file and returns deserialised object T\&. Note, if the CSV file has no header, then be sure to include 'Index' attributes on your class properties\&. I\&.e: "
.ti -1c
.RI "static dynamic \fBCsvFileToDynamicObject\fP (string path, string delimiter='auto', bool hasHeaders=true, bool ignoreQuotes=false, \fBCsvTrimOptions\fP trimOptions=\fBCsvTrimOptions\&.TrimFields\fP)"
.br
.RI "Reads CSV file and returns dynamic object Note, if the CSV file has no header, then be sure to include 'Index' attributes on your class properties\&. I\&.e: "
.ti -1c
.RI "static \fBDataTable\fP \fBCsvFileToDataTable\fP (string path, string delimiter='auto', bool hasHeaders=true, bool ignoreQuotes=false, \fBCsvTrimOptions\fP trimOptions=\fBCsvTrimOptions\&.TrimFields\fP)"
.br
.RI "Read CSV File and convert to DataTable object Note, if the CSV file has no header, then be sure to include 'Index' attributes on your class properties\&. I\&.e: "
.ti -1c
.RI "static void \fBToCsvFile< T >\fP (\fBIEnumerable\fP< T > obj, string path, char delimiter=',', bool hasHeaders=true, bool quoteAllFields=true, \fBCsvTrimOptions\fP trimOptions=\fBCsvTrimOptions\&.TrimFields\fP)"
.br
.RI "Write \fBIEnumerable\fP object to CSV file "
.ti -1c
.RI "static string \fBToCsvString< T >\fP (\fBIEnumerable\fP< T > obj, char delimiter=',', bool hasHeaders=true, bool quoteAllFields=true, \fBCsvTrimOptions\fP trimOptions=\fBCsvTrimOptions\&.TrimFields\fP)"
.br
.RI "Write \fBIEnumerable\fP object to CSV file "
.ti -1c
.RI "static void \fBToCsvFile< T >\fP (\fBList\fP< T > list, string path, char delimiter=',', bool hasHeaders=true, bool quoteAllFields=true, \fBCsvTrimOptions\fP trimOptions=\fBCsvTrimOptions\&.TrimFields\fP)"
.br
.RI "Write \fBList\fP to CSV file "
.ti -1c
.RI "static string \fBToCSVString< T >\fP (\fBList\fP< T > list, char delimiter=',', bool hasHeaders=true, bool quoteAllFields=true, \fBCsvTrimOptions\fP trimOptions=\fBCsvTrimOptions\&.TrimFields\fP)"
.br
.RI "Write \fBList\fP to CSV file "
.ti -1c
.RI "static void \fBToCsvFile\fP (\fBDataTable\fP dt, string path, char delimiter=',', bool hasHeaders=true, bool quoteAllFields=true, \fBCsvTrimOptions\fP trimOptions=\fBCsvTrimOptions\&.TrimFields\fP)"
.br
.RI "Converts DataTable to CSV and write to file "
.ti -1c
.RI "static string \fBToCsvString\fP (\fBDataTable\fP dt, char delimiter=',', bool hasHeaders=true, bool quoteAllFields=true, \fBCsvTrimOptions\fP trimOptions=\fBCsvTrimOptions\&.TrimFields\fP)"
.br
.RI "Converts DataTable object to CSV type string "
.ti -1c
.RI "static \fBList\fP< string > \fBGetCsvHeaderNames\fP (string path, string delimiter='auto')"
.br
.RI "Returns a list of CSV headers "
.ti -1c
.RI "static char \fBTryDetectDelimiter\fP (string[] lines)"
.br
.RI "Tries to auto detect CSV delimiter (tends to do a very good job of it)\&. "
.in -1c
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBJBToolkit\&.Csv\&.CsvHelper\&.CsvTrimOptions\fP\fC [strong]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINone \fP\fP
.TP
\fB\fITrimInsideQuotes \fP\fP
.TP
\fB\fITrimFields \fP\fP
.SH "Member Function Documentation"
.PP 
.SS "static \fBDataTable\fP JBToolkit\&.Csv\&.CsvHelper\&.CsvFileToDataTable (string path, string delimiter = \fC'auto'\fP, bool hasHeaders = \fCtrue\fP, bool ignoreQuotes = \fCfalse\fP, \fBCsvTrimOptions\fP trimOptions = \fC\fBCsvTrimOptions\&.TrimFields\fP\fP)\fC [static]\fP"

.PP
Read CSV File and convert to DataTable object Note, if the CSV file has no header, then be sure to include 'Index' attributes on your class properties\&. I\&.e: 
.PP
.nf
public class Foo
{
    [Index(0)]
    public int Id { get; set; }

    [Index(1)]
    public string Name { get; set; }
}

.fi
.PP
.PP
You can also map by a different header name to your class properties by adding the 'Name' attribute to your properties\&. I\&.e: 
.PP
.nf
public class Foo
{
    [Name("id")]
     public int Id { get; set; }

    [Name("name")]
    public string Name { get; set; }
}

.fi
.PP
.PP
Other attributes include: 
.PP
.nf
[BooleanTrueValues("yes")]
[BooleanFalseValues("no")]
[Optional]
[Ignored]

.fi
.PP
.PP
More information available at: https://joshclose.github.io/CsvHelper/getting-started
.PP
\fBParameters\fP
.RS 4
\fIpath\fP File path of CSV file
.br
\fIdelimiter\fP (Optional) - Single character seperator, i\&.e: ';' ',' '\\t' (tab) or 'auto' to try and detect
.br
\fIhasHeaders\fP (Optional) - Does the CSV file have headers or not?
.br
\fIignoreQuotes\fP (Optional) - If true, quotation marks are treated like any other character
.br
\fItrimOptions\fP (Optional) - Trim inside quotes, trim fields, don't trim
.RE
.PP
\fBReturns\fP
.RS 4
DataTable result
.RE
.PP

.SS "static dynamic JBToolkit\&.Csv\&.CsvHelper\&.CsvFileToDynamicObject (string path, string delimiter = \fC'auto'\fP, bool hasHeaders = \fCtrue\fP, bool ignoreQuotes = \fCfalse\fP, \fBCsvTrimOptions\fP trimOptions = \fC\fBCsvTrimOptions\&.TrimFields\fP\fP)\fC [static]\fP"

.PP
Reads CSV file and returns dynamic object Note, if the CSV file has no header, then be sure to include 'Index' attributes on your class properties\&. I\&.e: 
.PP
.nf
public class Foo
{
    [Index(0)]
    public int Id { get; set; }

    [Index(1)]
    public string Name { get; set; }
}

.fi
.PP
.PP
You can also map by a different header name to your class properties by adding the 'Name' attribute to your properties\&. I\&.e: 
.PP
.nf
public class Foo
{
    [Name("id")]
     public int Id { get; set; }

    [Name("name")]
    public string Name { get; set; }
}

.fi
.PP
.PP
Other attributes include: 
.PP
.nf
[BooleanTrueValues("yes")]
[BooleanFalseValues("no")]
[Optional]
[Ignored]

.fi
.PP
.PP
More information available at: https://joshclose.github.io/CsvHelper/getting-started
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP Type of object to deserialise to
.RE
.PP
\fBParameters\fP
.RS 4
\fIpath\fP File path of CSV file
.br
\fIdelimiter\fP (Optional) - Single character seperator, i\&.e: ';' ',' '\\t' (tab) or 'auto' to try and detect
.br
\fIhasHeaders\fP (Optional) - Does the CSV file have headers or not?
.br
\fIignoreQuotes\fP (Optional) - If true, quotation marks are treated like any other character
.br
\fItrimOptions\fP (Optional) - Trim inside quotes, trim fields, don't trim
.RE
.PP
\fBReturns\fP
.RS 4
Dynamic result
.RE
.PP

.SS "static \fBIEnumerable\fP<T> JBToolkit\&.Csv\&.CsvHelper\&.CsvFileToEnumerableObject< T > (string path, string delimiter = \fC'auto'\fP, bool hasHeaders = \fCtrue\fP, bool ignoreQuotes = \fCfalse\fP, \fBCsvTrimOptions\fP trimOptions = \fC\fBCsvTrimOptions\&.TrimFields\fP\fP)\fC [static]\fP"

.PP
Reads CSV file and returns deserialised object T\&. Note, if the CSV file has no header, then be sure to include 'Index' attributes on your class properties\&. I\&.e: 
.PP
.nf
public class Foo
{
    [Index(0)]
    public int Id { get; set; }

    [Index(1)]
    public string Name { get; set; }
}

.fi
.PP
.PP
You can also map by a different header name to your class properties by adding the 'Name' attribute to your properties\&. I\&.e: 
.PP
.nf
public class Foo
{
    [Name("id")]
     public int Id { get; set; }

    [Name("name")]
    public string Name { get; set; }
}

.fi
.PP
.PP
Other attributes include: 
.PP
.nf
[BooleanTrueValues("yes")]
[BooleanFalseValues("no")]
[Optional]
[Ignored]

.fi
.PP
.PP
More information available at: https://joshclose.github.io/CsvHelper/getting-started
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP Type of object to deserialise to
.RE
.PP
\fBParameters\fP
.RS 4
\fIpath\fP File path of CSV file
.br
\fIdelimiter\fP (Optional) - Single character seperator, i\&.e: ';' ',' '\\t' (tab) or 'auto' to try and detect
.br
\fIhasHeaders\fP (Optional) - Does the CSV file have headers or not?
.br
\fIignoreQuotes\fP (Optional) - If true, quotation marks are treated like any other character
.br
\fItrimOptions\fP (Optional) - Trim inside quotes, trim fields, don't trim
.RE
.PP
\fBReturns\fP
.RS 4
\fBIEnumerable\fP result
.RE
.PP

.SS "static \fBList\fP<string> JBToolkit\&.Csv\&.CsvHelper\&.GetCsvHeaderNames (string path, string delimiter = \fC'auto'\fP)\fC [static]\fP"

.PP
Returns a list of CSV headers 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP Path to CSV file
.br
\fIdelimiter\fP (Optional) - Seperator, i\&.e: ; , \\t (tab)
.RE
.PP
\fBReturns\fP
.RS 4
Headers list
.RE
.PP

.br
 
.SS "static void JBToolkit\&.Csv\&.CsvHelper\&.ToCsvFile (\fBDataTable\fP dt, string path, char delimiter = \fC','\fP, bool hasHeaders = \fCtrue\fP, bool quoteAllFields = \fCtrue\fP, \fBCsvTrimOptions\fP trimOptions = \fC\fBCsvTrimOptions\&.TrimFields\fP\fP)\fC [static]\fP"

.PP
Converts DataTable to CSV and write to file 
.PP
\fBParameters\fP
.RS 4
\fIdt\fP Input DataTable to convert
.br
\fIpath\fP Filepath to write to
.br
\fIdelimiter\fP (Optional) - Seperator, i\&.e: ; , \\t (tab)
.br
\fIhasHeaders\fP (Optional) - Include headers or not
.br
\fItrimOptions\fP (Optional) - Trim inside quotes, trim fields, don't trim
.RE
.PP

.SS "static void \fBJBToolkit\&.Csv\&.CsvHelper\&.ToCsvFile\fP< T > (\fBIEnumerable\fP< T > obj, string path, char delimiter = \fC','\fP, bool hasHeaders = \fCtrue\fP, bool quoteAllFields = \fCtrue\fP, \fBCsvTrimOptions\fP trimOptions = \fC\fBCsvTrimOptions\&.TrimFields\fP\fP)\fC [static]\fP"

.PP
Write \fBIEnumerable\fP object to CSV file More information available at: https://joshclose.github.io/CsvHelper/getting-started
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP 
.RE
.PP
\fBParameters\fP
.RS 4
\fIobj\fP 
.br
\fIpath\fP Output filepath
.br
\fIdelimiter\fP (Optional) - Seperator, i\&.e: ; , \\t (tab)
.br
\fIhasHeaders\fP (Optional) -Include headers or not
.br
\fItrimOptions\fP (Optional) - Trim inside quotes, trim fields, don't trim
.RE
.PP

.SS "static void \fBJBToolkit\&.Csv\&.CsvHelper\&.ToCsvFile\fP< T > (\fBList\fP< T > list, string path, char delimiter = \fC','\fP, bool hasHeaders = \fCtrue\fP, bool quoteAllFields = \fCtrue\fP, \fBCsvTrimOptions\fP trimOptions = \fC\fBCsvTrimOptions\&.TrimFields\fP\fP)\fC [static]\fP"

.PP
Write \fBList\fP to CSV file 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP 
.RE
.PP
\fBParameters\fP
.RS 4
\fIobj\fP 
.br
\fIpath\fP Output filepath
.br
\fIdelimiter\fP (Optional) - Seperator, i\&.e: ; , \\t (tab)
.br
\fIhasHeaders\fP (Optional) -Include headers or not
.br
\fItrimOptions\fP (Optional) - Trim inside quotes, trim fields, don't trim
.RE
.PP

.SS "static string JBToolkit\&.Csv\&.CsvHelper\&.ToCsvString (\fBDataTable\fP dt, char delimiter = \fC','\fP, bool hasHeaders = \fCtrue\fP, bool quoteAllFields = \fCtrue\fP, \fBCsvTrimOptions\fP trimOptions = \fC\fBCsvTrimOptions\&.TrimFields\fP\fP)\fC [static]\fP"

.PP
Converts DataTable object to CSV type string 
.PP
\fBParameters\fP
.RS 4
\fIdt\fP DataTable object to convert
.br
\fIdelimiter\fP (Optional) - Seperator, i\&.e: ; , \\t (tab)
.br
\fIhasHeaders\fP (Optional) - Include headers or not
.br
\fItrimOptions\fP (Optional) - Trim inside quotes, trim fields, don't trim
.RE
.PP
\fBReturns\fP
.RS 4
CSV string
.RE
.PP

.SS "static string \fBJBToolkit\&.Csv\&.CsvHelper\&.ToCsvString\fP< T > (\fBIEnumerable\fP< T > obj, char delimiter = \fC','\fP, bool hasHeaders = \fCtrue\fP, bool quoteAllFields = \fCtrue\fP, \fBCsvTrimOptions\fP trimOptions = \fC\fBCsvTrimOptions\&.TrimFields\fP\fP)\fC [static]\fP"

.PP
Write \fBIEnumerable\fP object to CSV file More information available at: https://joshclose.github.io/CsvHelper/getting-started
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP 
.RE
.PP
\fBParameters\fP
.RS 4
\fIobj\fP 
.br
\fIpath\fP Output filepath
.br
\fIdelimiter\fP (Optional) - Seperator, i\&.e: ; , \\t (tab)
.br
\fIhasHeaders\fP (Optional) -Include headers or not
.br
\fItrimOptions\fP (Optional) - Trim inside quotes, trim fields, don't trim
.RE
.PP

.SS "static string JBToolkit\&.Csv\&.CsvHelper\&.ToCSVString< T > (\fBList\fP< T > list, char delimiter = \fC','\fP, bool hasHeaders = \fCtrue\fP, bool quoteAllFields = \fCtrue\fP, \fBCsvTrimOptions\fP trimOptions = \fC\fBCsvTrimOptions\&.TrimFields\fP\fP)\fC [static]\fP"

.PP
Write \fBList\fP to CSV file 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP 
.RE
.PP
\fBParameters\fP
.RS 4
\fIobj\fP 
.br
\fIpath\fP Output filepath
.br
\fIdelimiter\fP (Optional) - Seperator, i\&.e: ; , \\t (tab)
.br
\fIhasHeaders\fP (Optional) -Include headers or not
.br
\fItrimOptions\fP (Optional) - Trim inside quotes, trim fields, don't trim
.RE
.PP

.SS "static char JBToolkit\&.Csv\&.CsvHelper\&.TryDetectDelimiter (string[] lines)\fC [static]\fP"

.PP
Tries to auto detect CSV delimiter (tends to do a very good job of it)\&. 
.PP
\fBParameters\fP
.RS 4
\fIlines\fP Text lines array
.RE
.PP
\fBReturns\fP
.RS 4
Likely delimiter
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for JB\&.Toolkit from the source code\&.
