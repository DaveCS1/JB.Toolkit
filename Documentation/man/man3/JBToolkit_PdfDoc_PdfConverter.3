.TH "JBToolkit.PdfDoc.PdfConverter" 3 "Sun Oct 18 2020" "JB.Toolkit" \" -*- nroff -*-
.ad l
.nh
.SH NAME
JBToolkit.PdfDoc.PdfConverter \- Methods to convert Docx to PDF through M-Files\&. I've done it this way as it's costs a tonne for a docx to pdf converter license with the likes of Aspose, Spire, ABCpdf etc and M-Files is already using Aspose so just utilise that\&. The process involves uploading a file to M-Files, converting it to a PDF there, then downloading it as PDF and finally deleting (destroying) the file in the M-Files vault  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBHtmlToPdfConverter\fP"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBConvertMsOfficeDocToPdf\fP (string docInputPath, string pdfOutputPath)"
.br
.RI "Save Docx document to PDF to file 
.PP
\fBParameters\fP
.RS 4
\fIdocInputPath\fP Input \&.docx path
.br
\fIpdfOutputPath\fP Output \&.pdf path
.RE
.PP
"
.ti -1c
.RI "static MemoryStream \fBConvertMsOfficeDocToPdf\fP (string docInputPath)"
.br
.RI "Converts Docx document to PDF memory stream (i\&.e\&. for use in \fBWeb\fP Requests) "
.ti -1c
.RI "static MemoryStream \fBConvertMsOfficeDocToPdf\fP (MemoryStream ms, string fileExtension)"
.br
.RI "Converts Docx document to PDF memory stream (i\&.e\&. for use in \fBWeb\fP Requests) "
.ti -1c
.RI "static string \fBConvertPdfToHtml\fP (string path, string documentName, string outputRootPath='', bool overwriteIfExists=false, int timeoutSeconds=30)"
.br
.RI "Saves a PDF file as HTML file(s) - 1 HTML file per PDF page\&. The output string is the root path where the files have been created "
.ti -1c
.RI "static byte[][] \fBConvertPdfToImage2DByteArray\fP (string path, bool usingToExtractText=false, int timeoutSeconds=30)"
.br
.RI "Converts PDF to 3D byte array (array of byte arrays - 1 byte array for each image for each page) "
.ti -1c
.RI "static MemoryStream[] \fBConvertPdfToPng\fP (string path, bool usingToExtactText=false, int timeoutSeconds=30)"
.br
.RI "Converts PDF to memory stream array (array memory streams - 1 memory stream for each image for each page) "
.ti -1c
.RI "static void \fBConvertPdfToPng\fP (string inputPath, string rootOutputPath, string imageTitle, int timeoutSeconds=30)"
.br
.RI "Converts and saves a PDF file as 1 or more PNG images (1 image per PDF page) "
.ti -1c
.RI "static void \fBConvertToPdf\fP (string docInputPath, string pdfOutputPath)"
.br
.RI "Convert and save pretty much any office file (\&.docx, \&.xlsx, \&.pptx, \&.vsdx, \&.pub, \&.msg etc), image or text file to PDF "
.ti -1c
.RI "static MemoryStream \fBConvertToPdf\fP (MemoryStream ms, string fileExtension)"
.br
.RI "Converts document file or image to PDF memory stream (i\&.e\&. for use in \fBWeb\fP Requests) "
.ti -1c
.RI "static MemoryStream \fBConvertToPdf\fP (string docInputPut)"
.br
.RI "Converts document file or image to PDF memory stream (i\&.e\&. for use in \fBWeb\fP Requests) "
.in -1c
.SH "Detailed Description"
.PP 
Methods to convert Docx to PDF through M-Files\&. I've done it this way as it's costs a tonne for a docx to pdf converter license with the likes of Aspose, Spire, ABCpdf etc and M-Files is already using Aspose so just utilise that\&. The process involves uploading a file to M-Files, converting it to a PDF there, then downloading it as PDF and finally deleting (destroying) the file in the M-Files vault 

Methods to convert a document file or image to PDF through M-Files\&. I've done it this way as it's costs a tonne for a pdf converter license with the likes of Aspose, Spire, ABCpdf etc and M-Files is already using Aspose so just utilise that\&. The process involves uploading a file to M-Files, converting it to a PDF there, then downloading it as PDF and finally deleting (destroying) the file in the M-Files vault
.PP
Converts PDF to image (memory stream array, byte array or PNG) - Also includes optimised option image version for use with Google Vision API (OCR)
.PP
Methods to convert or save PDF file as HTML - Outputs the directory containing the HTML and image files
.PP
Methods to convert HTML / \fBWeb\fP page / Word Docx to PDF - Output as file or memory stream\&. Uses wkhtmltopdf\&.exe as embedded resource for HTML or M-Files API for Word docx
.SH "Member Function Documentation"
.PP 
.SS "static MemoryStream JBToolkit\&.PdfDoc\&.PdfConverter\&.ConvertMsOfficeDocToPdf (MemoryStream ms, string fileExtension)\fC [static]\fP"

.PP
Converts Docx document to PDF memory stream (i\&.e\&. for use in \fBWeb\fP Requests) 
.PP
\fBParameters\fP
.RS 4
\fIdocxInputPath\fP File path
.RE
.PP
\fBReturns\fP
.RS 4
Memory stream
.RE
.PP

.SS "static MemoryStream JBToolkit\&.PdfDoc\&.PdfConverter\&.ConvertMsOfficeDocToPdf (string docInputPath)\fC [static]\fP"

.PP
Converts Docx document to PDF memory stream (i\&.e\&. for use in \fBWeb\fP Requests) 
.PP
\fBParameters\fP
.RS 4
\fIdocInputPath\fP File path
.RE
.PP
\fBReturns\fP
.RS 4
Memory stream
.RE
.PP

.SS "static void JBToolkit\&.PdfDoc\&.PdfConverter\&.ConvertMsOfficeDocToPdf (string docInputPath, string pdfOutputPath)\fC [static]\fP"

.PP
Save Docx document to PDF to file 
.PP
\fBParameters\fP
.RS 4
\fIdocInputPath\fP Input \&.docx path
.br
\fIpdfOutputPath\fP Output \&.pdf path
.RE
.PP

.SS "static string JBToolkit\&.PdfDoc\&.PdfConverter\&.ConvertPdfToHtml (string path, string documentName, string outputRootPath = \fC''\fP, bool overwriteIfExists = \fCfalse\fP, int timeoutSeconds = \fC30\fP)\fC [static]\fP"

.PP
Saves a PDF file as HTML file(s) - 1 HTML file per PDF page\&. The output string is the root path where the files have been created 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP PDF File path to convert
.br
\fIoutputRootPath\fP Optional - Root path to save to (will create directory if it doesn't exist)
.br
\fIdocumentName\fP Name used for document site / document name
.br
\fIoverwriteIfExists\fP Attempt to delete current target root directory if it already exists (overwrite)
.br
\fItimeoutSeconds\fP Timeout before reporting failing
.RE
.PP
\fBReturns\fP
.RS 4
RSoot path where the files have been created
.RE
.PP

.SS "static byte [][] JBToolkit\&.PdfDoc\&.PdfConverter\&.ConvertPdfToImage2DByteArray (string path, bool usingToExtractText = \fCfalse\fP, int timeoutSeconds = \fC30\fP)\fC [static]\fP"

.PP
Converts PDF to 3D byte array (array of byte arrays - 1 byte array for each image for each page) 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP Path of PDF file to convert
.br
\fIusingToExtractText\fP Optimise for Google Vision API (OCR) use
.br
\fItimeoutSeconds\fP Timeout before reporting failing
.RE
.PP
\fBReturns\fP
.RS 4
Return 3D byte array (array of byte arrays - 1 byte array for each image for each page
.RE
.PP

.SS "static void JBToolkit\&.PdfDoc\&.PdfConverter\&.ConvertPdfToPng (string inputPath, string rootOutputPath, string imageTitle, int timeoutSeconds = \fC30\fP)\fC [static]\fP"

.PP
Converts and saves a PDF file as 1 or more PNG images (1 image per PDF page) 
.PP
\fBParameters\fP
.RS 4
\fIinputPath\fP Input file path of PDF file
.br
\fIrootOutputPath\fP Root output folder where PNG images will be saved to
.br
\fIimageTitle\fP A given title for the prefix of the set of images
.br
\fItimeoutSeconds\fP Timeout in seconds before error is reported
.br
\fIthrowOnError\fP 
.RE
.PP

.SS "static MemoryStream [] JBToolkit\&.PdfDoc\&.PdfConverter\&.ConvertPdfToPng (string path, bool usingToExtactText = \fCfalse\fP, int timeoutSeconds = \fC30\fP)\fC [static]\fP"

.PP
Converts PDF to memory stream array (array memory streams - 1 memory stream for each image for each page) 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP Path of PDF file to convert
.br
\fIusingToExtractText\fP Optimise for Google Vision API (OCR) use
.br
\fItimeoutSeconds\fP Timeout before reporting failing
.RE
.PP
\fBReturns\fP
.RS 4
Memory stream array (array memory streams - 1 memory stream for each image for each page)
.RE
.PP

.SS "static MemoryStream JBToolkit\&.PdfDoc\&.PdfConverter\&.ConvertToPdf (MemoryStream ms, string fileExtension)\fC [static]\fP"

.PP
Converts document file or image to PDF memory stream (i\&.e\&. for use in \fBWeb\fP Requests) 
.PP
\fBParameters\fP
.RS 4
\fIdocInputPut\fP File path
.br
\fIfileExtension\fP The PDF converter can't use a memory stream, as a workaround we save a temporary file, so we need a file extension to determine the file type
.RE
.PP
\fBReturns\fP
.RS 4
Memory stream
.RE
.PP

.SS "static void JBToolkit\&.PdfDoc\&.PdfConverter\&.ConvertToPdf (string docInputPath, string pdfOutputPath)\fC [static]\fP"

.PP
Convert and save pretty much any office file (\&.docx, \&.xlsx, \&.pptx, \&.vsdx, \&.pub, \&.msg etc), image or text file to PDF 
.PP
\fBParameters\fP
.RS 4
\fIdocInputPath\fP Input document or image path path
.br
\fIpdfOutputPath\fP Output \&.pdf path
.RE
.PP

.SS "static MemoryStream JBToolkit\&.PdfDoc\&.PdfConverter\&.ConvertToPdf (string docInputPut)\fC [static]\fP"

.PP
Converts document file or image to PDF memory stream (i\&.e\&. for use in \fBWeb\fP Requests) 
.PP
\fBParameters\fP
.RS 4
\fIdocInputPut\fP File path
.RE
.PP
\fBReturns\fP
.RS 4
Memory stream
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for JB\&.Toolkit from the source code\&.
